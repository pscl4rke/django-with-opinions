

"""
Django settings for {{ project_name }} project.

Generated by "django-admin startproject" using Django {{ django_version }}
and the django-with-opinions template.

For more information on this file, see
https://docs.djangoproject.com/en/{{ docs_version }}/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/
"""


from typing import Any, Dict, List

import os
from pathlib import Path
from urllib.parse import urlparse


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Set up logging ASAP in case processing this file generates messages
LOGGING_CONFIG = None  # only do our own logging config, not django's
from . import applogging
applogging.initialise()
# Absorb log messages if the test passes, show them if it fails:
TEST_RUNNER = "utterless.contrib.django.DiscoverRunner"


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/{{ docs_version }}/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "{{ secret_key }}"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "False").lower().startswith("t")

ALLOWED_HOSTS: List[str] = [
    #"localhost",
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "downpage",
    "{{ project_name }}",
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = '{{ project_name }}.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.jinja2.Jinja2',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            "environment": "{{ project_name }}.rendering.environment",
        },
    },
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '{{ project_name }}.wsgi.application'


# Database
# https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/#databases

database = urlparse(os.environ["DATABASE"])
# export DATABASE=sqlite3::memory:
# export DATABASE=sqlite3:relativefile.db
# export DATABASE=sqlite3:/path/to/absolutefile.db
# export DATABASE=mysql://username:password@localhost/dbname
DATABASES: Dict[str, Dict[str, Any]] = {
    "default": {
        "ENGINE": "django.db.backends.%s" % database.scheme,
        "HOST": database.hostname,
        "PORT": database.port,
        "USER": database.username,
        "PASSWORD": database.password,
        "NAME": database.path,
        "OPTIONS": {
            #"read_default_file": "/path/to/my.cnf",  # for mysql
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/{{ docs_version }}/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/{{ docs_version }}/howto/static-files/

STATIC_URL = 'static/'
#STATIC_ROOT = "/path/to/collect/assets/into"

DOWNPAGE_PAGES = [
    ("502.html", "{{ project_name }}/error.html",
        {"status_code": "502", "status_message": "Bad Gateway"}),
    ("503.html", "{{ project_name }}/error.html",
        {"status_code": "503", "status_message": "Service Unavailable"}),
    ("504.html", "{{ project_name }}/error.html",
        {"status_code": "504", "status_message": "Gateway Timeout"}),
]

# Default primary key field type
# https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
